package generate

import "com.github.denisbytes.goimageai/view/layout"
import "com.github.denisbytes.goimageai/types"
import "fmt"
import "com.github.denisbytes.goimageai/view"
import "com.github.denisbytes.goimageai/view/ui"

type ViewData struct {
	Images     []types.Image
	FormParams FormData
	FormErrors FormErrors
}

templ Index(data ViewData){
    @layout.App(true){
        <div class="flex w-full h-[calc(100vh-69px)]">
            <div class="w-[400px] border-r border-gray-700 p-4">
                @Form(FormData{},FormErrors{})
            </div>
            <div class="flex-1 bg-base-300 h-full">
                @Gallery(data.Images)
            </div>
        </div>
    }
}

templ Gallery(images []types.Image){
    <div class="grid grid-cols-4 p-4 gap-4 w-full" id="gallery">
        for _,image := range images {
            @GalleryImage(image)
        }
    </div>
}

templ GalleryImage(image types.Image){
    if image.Status == types.ImageStatusCompleted {
        <div class="rounded-xl aspect-[2/3] cursor-pointer">
            <img src={image.ImageLocation} class="object-cover rounded-xl" />
        </div>
    } else if image.Status == types.ImageStatusFailed {
        <div class="bg-red-100 rounded-xl aspect-[2/3] flex justify-center items-center text-center">
            <i class="fa-solid fa-bug"></i>
        </div>
    } else if image.Status == types.ImageStatusPending{
        <div hx-get={fmt.Sprintf("/generate/image/status/%d", image.ID)} 
            hx-trigger="load delay:3s" 
            class="bg-red-100 rounded-xl aspect-[2/3] flex justify-center items-center text-center">
            <span class="loading loading-spinner loading-lg text-gray-600"></span>
        </div>
    }
}

type FormErrors struct {
	Prompt        string
	Amount        string
	CreditsNeeded int
	UserCredits   int
	Credits       bool
}

type FormData struct {
	Prompt string
	Amount int
}


templ Form(params FormData, errors FormErrors){
    <form hx-post="/generate" hx-swap="outerHTML">
        <div>
            <label class="form-control">
                <div class="label">
                    <span class="label-text">Enter your prompt</span>
                </div>
                <textarea name="prompt" class="textarea textarea-bordered h-24" placeholder="a woman in a white dress">{ params.Prompt }</textarea>
                if len(errors.Prompt) > 0 {
                    <div class="label">
                        <span class="label-text text-error">{ errors.Prompt }</span>
                    </div>
                }
            </label>
            <label class="form-control my-4">
                <div>
                    <span class="label-text">How many images</span>
                </div>
                <div class="join">
                    for _, amount := range amounts {
                        if amount == view.String(params.Amount) {
                            <input class="join-item btn" type="radio" name="amount" checked value={ amount } aria-label={ amount } />
                        } else {
                            <input class="join-item btn" type="radio" name="amount" value={ amount } aria-label={ amount } />
                        }
                    }
                </div>
                if len(errors.Amount) > 0 {
                    <div class="label">
                        <span class="label-text text-error">{ errors.Amount }</span>
                    </div>
                }
            </label>
            <button class="btn btn-primary w-full mt-4">Generate</button>
        </div>
    </form>
    if errors.Credits {
		@ui.CreditsModal(errors.CreditsNeeded, errors.UserCredits)
	}
}

var amounts = []string{
    "1", "2", "4", "8",
}
